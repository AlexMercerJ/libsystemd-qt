/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generic-types.h -p sessioninterface /home/ndr/projects/libsystemd-qt/dbus/introspection/org.freedesktop.login1.Session.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SESSIONINTERFACE_H_1365342389
#define SESSIONINTERFACE_H_1365342389

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.login1.Session
 */
class OrgFreedesktopLogin1SessionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.login1.Session"; }

public:
    OrgFreedesktopLogin1SessionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopLogin1SessionInterface();

    Q_PROPERTY(bool Active READ active)
    inline bool active() const
    { return qvariant_cast< bool >(property("Active")); }

    Q_PROPERTY(uint Audit READ audit)
    inline uint audit() const
    { return qvariant_cast< uint >(property("Audit")); }

    Q_PROPERTY(QString Class READ sessionClass)
    inline QString sessionClass() const
    { return qvariant_cast< QString >(property("Class")); }

    Q_PROPERTY(QStringList Controllers READ controllers)
    inline QStringList controllers() const
    { return qvariant_cast< QStringList >(property("Controllers")); }

    Q_PROPERTY(QString DefaultControlGroup READ defaultControlGroup)
    inline QString defaultControlGroup() const
    { return qvariant_cast< QString >(property("DefaultControlGroup")); }

    Q_PROPERTY(QString Display READ display)
    inline QString display() const
    { return qvariant_cast< QString >(property("Display")); }

    Q_PROPERTY(QString Id READ id)
    inline QString id() const
    { return qvariant_cast< QString >(property("Id")); }

    Q_PROPERTY(bool IdleHint READ idleHint)
    inline bool idleHint() const
    { return qvariant_cast< bool >(property("IdleHint")); }

    Q_PROPERTY(qulonglong IdleSinceHint READ idleSinceHint)
    inline qulonglong idleSinceHint() const
    { return qvariant_cast< qulonglong >(property("IdleSinceHint")); }

    Q_PROPERTY(qulonglong IdleSinceHintMonotonic READ idleSinceHintMonotonic)
    inline qulonglong idleSinceHintMonotonic() const
    { return qvariant_cast< qulonglong >(property("IdleSinceHintMonotonic")); }

    Q_PROPERTY(bool KillProcesses READ killProcesses)
    inline bool killProcesses() const
    { return qvariant_cast< bool >(property("KillProcesses")); }

    Q_PROPERTY(uint Leader READ leader)
    inline uint leader() const
    { return qvariant_cast< uint >(property("Leader")); }

    Q_PROPERTY(QString Name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("Name")); }

    Q_PROPERTY(bool Remote READ remote)
    inline bool remote() const
    { return qvariant_cast< bool >(property("Remote")); }

    Q_PROPERTY(QString RemoteHost READ remoteHost)
    inline QString remoteHost() const
    { return qvariant_cast< QString >(property("RemoteHost")); }

    Q_PROPERTY(QString RemoteUser READ remoteUser)
    inline QString remoteUser() const
    { return qvariant_cast< QString >(property("RemoteUser")); }

    Q_PROPERTY(QStringList ResetControllers READ resetControllers)
    inline QStringList resetControllers() const
    { return qvariant_cast< QStringList >(property("ResetControllers")); }

    Q_PROPERTY(SessionDBusSeat Seat READ seat)
    inline SessionDBusSeat seat() const
    { return qvariant_cast< SessionDBusSeat >(property("Seat")); }

    Q_PROPERTY(QString Service READ service)
    inline QString service() const
    { return qvariant_cast< QString >(property("Service")); }

    Q_PROPERTY(QString State READ state)
    inline QString state() const
    { return qvariant_cast< QString >(property("State")); }

    Q_PROPERTY(QString TTY READ tTY)
    inline QString tTY() const
    { return qvariant_cast< QString >(property("TTY")); }

    Q_PROPERTY(qulonglong Timestamp READ timestamp)
    inline qulonglong timestamp() const
    { return qvariant_cast< qulonglong >(property("Timestamp")); }

    Q_PROPERTY(qulonglong TimestampMonotonic READ timestampMonotonic)
    inline qulonglong timestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("TimestampMonotonic")); }

    Q_PROPERTY(QString Type READ type)
    inline QString type() const
    { return qvariant_cast< QString >(property("Type")); }

    Q_PROPERTY(SessionDBusUser User READ user)
    inline SessionDBusUser user() const
    { return qvariant_cast< SessionDBusUser >(property("User")); }

    Q_PROPERTY(uint VTNr READ vTNr)
    inline uint vTNr() const
    { return qvariant_cast< uint >(property("VTNr")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Activate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Activate"), argumentList);
    }

    inline QDBusPendingReply<> Kill(const QString &who, const QString &signal)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(who) << QVariant::fromValue(signal);
        return asyncCallWithArgumentList(QLatin1String("Kill"), argumentList);
    }

    inline QDBusPendingReply<> Lock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Lock"), argumentList);
    }

    inline QDBusPendingReply<> SetIdleHint(bool b)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(b);
        return asyncCallWithArgumentList(QLatin1String("SetIdleHint"), argumentList);
    }

    inline QDBusPendingReply<> Terminate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Terminate"), argumentList);
    }

    inline QDBusPendingReply<> Unlock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Unlock"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
