/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generic-types.h -p userinterface /home/ndr/projects/libsystemd-qt/dbus/introspection/org.freedesktop.login1.User.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef USERINTERFACE_H_1365342322
#define USERINTERFACE_H_1365342322

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.login1.User
 */
class OrgFreedesktopLogin1UserInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.login1.User"; }

public:
    OrgFreedesktopLogin1UserInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopLogin1UserInterface();

    Q_PROPERTY(QString DefaultControlGroup READ defaultControlGroup)
    inline QString defaultControlGroup() const
    { return qvariant_cast< QString >(property("DefaultControlGroup")); }

    Q_PROPERTY(UserDBusSession Display READ display)
    inline UserDBusSession display() const
    { return qvariant_cast< UserDBusSession >(property("Display")); }

    Q_PROPERTY(uint GID READ gID)
    inline uint gID() const
    { return qvariant_cast< uint >(property("GID")); }

    Q_PROPERTY(bool IdleHint READ idleHint)
    inline bool idleHint() const
    { return qvariant_cast< bool >(property("IdleHint")); }

    Q_PROPERTY(qulonglong IdleSinceHint READ idleSinceHint)
    inline qulonglong idleSinceHint() const
    { return qvariant_cast< qulonglong >(property("IdleSinceHint")); }

    Q_PROPERTY(qulonglong IdleSinceHintMonotonic READ idleSinceHintMonotonic)
    inline qulonglong idleSinceHintMonotonic() const
    { return qvariant_cast< qulonglong >(property("IdleSinceHintMonotonic")); }

    Q_PROPERTY(QString Name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("Name")); }

    Q_PROPERTY(QString RuntimePath READ runtimePath)
    inline QString runtimePath() const
    { return qvariant_cast< QString >(property("RuntimePath")); }

    Q_PROPERTY(QString Service READ service)
    inline QString service() const
    { return qvariant_cast< QString >(property("Service")); }

    Q_PROPERTY(UserDBusSessionList Sessions READ sessions)
    inline UserDBusSessionList sessions() const
    { return qvariant_cast< UserDBusSessionList >(property("Sessions")); }

    Q_PROPERTY(QString State READ state)
    inline QString state() const
    { return qvariant_cast< QString >(property("State")); }

    Q_PROPERTY(qulonglong Timestamp READ timestamp)
    inline qulonglong timestamp() const
    { return qvariant_cast< qulonglong >(property("Timestamp")); }

    Q_PROPERTY(qulonglong TimestampMonotonic READ timestampMonotonic)
    inline qulonglong timestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("TimestampMonotonic")); }

    Q_PROPERTY(uint UID READ uID)
    inline uint uID() const
    { return qvariant_cast< uint >(property("UID")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Kill(const QString &signal)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(signal);
        return asyncCallWithArgumentList(QLatin1String("Kill"), argumentList);
    }

    inline QDBusPendingReply<> Terminate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Terminate"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
