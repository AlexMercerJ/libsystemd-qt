/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generic-types.h -p seatinterface /home/ndr/projects/libsystemd-qt/dbus/introspection/org.freedesktop.login1.Seat.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SEATINTERFACE_H_1365342321
#define SEATINTERFACE_H_1365342321

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.login1.Seat
 */
class OrgFreedesktopLogin1SeatInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.login1.Seat"; }

public:
    OrgFreedesktopLogin1SeatInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopLogin1SeatInterface();

    Q_PROPERTY(QString ActiveSession READ activeSession)
    inline QString activeSession() const
    { return qvariant_cast< QString >(property("ActiveSession")); }

    Q_PROPERTY(bool CanGraphical READ canGraphical)
    inline bool canGraphical() const
    { return qvariant_cast< bool >(property("CanGraphical")); }

    Q_PROPERTY(bool CanMultiSession READ canMultiSession)
    inline bool canMultiSession() const
    { return qvariant_cast< bool >(property("CanMultiSession")); }

    Q_PROPERTY(bool CanTTY READ canTTY)
    inline bool canTTY() const
    { return qvariant_cast< bool >(property("CanTTY")); }

    Q_PROPERTY(QString Id READ id)
    inline QString id() const
    { return qvariant_cast< QString >(property("Id")); }

    Q_PROPERTY(bool IdleHint READ idleHint)
    inline bool idleHint() const
    { return qvariant_cast< bool >(property("IdleHint")); }

    Q_PROPERTY(qulonglong IdleSinceHint READ idleSinceHint)
    inline qulonglong idleSinceHint() const
    { return qvariant_cast< qulonglong >(property("IdleSinceHint")); }

    Q_PROPERTY(qulonglong IdleSinceHintMonotonic READ idleSinceHintMonotonic)
    inline qulonglong idleSinceHintMonotonic() const
    { return qvariant_cast< qulonglong >(property("IdleSinceHintMonotonic")); }

    Q_PROPERTY(SeatDBusSessionList Sessions READ sessions)
    inline SeatDBusSessionList sessions() const
    { return qvariant_cast< SeatDBusSessionList >(property("Sessions")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ActivateSession(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("ActivateSession"), argumentList);
    }

    inline QDBusPendingReply<> Terminate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Terminate"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
