/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generic-types.h -p managerinterface /home/ndr/projects/libsystemd-qt/dbus/introspection/org.freedesktop.systemd1.Manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MANAGERINTERFACE_H_1364907520
#define MANAGERINTERFACE_H_1364907520

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.systemd1.Manager
 */
class OrgFreedesktopSystemd1ManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.systemd1.Manager"; }

public:
    OrgFreedesktopSystemd1ManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopSystemd1ManagerInterface();

    Q_PROPERTY(bool ConfirmSpawn READ confirmSpawn)
    inline bool confirmSpawn() const
    { return qvariant_cast< bool >(property("ConfirmSpawn")); }

    Q_PROPERTY(QString ControlGroupHierarchy READ controlGroupHierarchy)
    inline QString controlGroupHierarchy() const
    { return qvariant_cast< QString >(property("ControlGroupHierarchy")); }

    Q_PROPERTY(QStringList DefaultControllers READ defaultControllers)
    inline QStringList defaultControllers() const
    { return qvariant_cast< QStringList >(property("DefaultControllers")); }

    Q_PROPERTY(QString DefaultStandardError READ defaultStandardError)
    inline QString defaultStandardError() const
    { return qvariant_cast< QString >(property("DefaultStandardError")); }

    Q_PROPERTY(QString DefaultStandardOutput READ defaultStandardOutput)
    inline QString defaultStandardOutput() const
    { return qvariant_cast< QString >(property("DefaultStandardOutput")); }

    Q_PROPERTY(QStringList Environment READ environment)
    inline QStringList environment() const
    { return qvariant_cast< QStringList >(property("Environment")); }

    Q_PROPERTY(QString Features READ features)
    inline QString features() const
    { return qvariant_cast< QString >(property("Features")); }

    Q_PROPERTY(qulonglong FinishTimestamp READ finishTimestamp)
    inline qulonglong finishTimestamp() const
    { return qvariant_cast< qulonglong >(property("FinishTimestamp")); }

    Q_PROPERTY(qulonglong FinishTimestampMonotonic READ finishTimestampMonotonic)
    inline qulonglong finishTimestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("FinishTimestampMonotonic")); }

    Q_PROPERTY(qulonglong FirmwareTimestamp READ firmwareTimestamp)
    inline qulonglong firmwareTimestamp() const
    { return qvariant_cast< qulonglong >(property("FirmwareTimestamp")); }

    Q_PROPERTY(qulonglong FirmwareTimestampMonotonic READ firmwareTimestampMonotonic)
    inline qulonglong firmwareTimestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("FirmwareTimestampMonotonic")); }

    Q_PROPERTY(qulonglong InitRDTimestamp READ initRDTimestamp)
    inline qulonglong initRDTimestamp() const
    { return qvariant_cast< qulonglong >(property("InitRDTimestamp")); }

    Q_PROPERTY(qulonglong InitRDTimestampMonotonic READ initRDTimestampMonotonic)
    inline qulonglong initRDTimestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("InitRDTimestampMonotonic")); }

    Q_PROPERTY(qulonglong KernelTimestamp READ kernelTimestamp)
    inline qulonglong kernelTimestamp() const
    { return qvariant_cast< qulonglong >(property("KernelTimestamp")); }

    Q_PROPERTY(qulonglong KernelTimestampMonotonic READ kernelTimestampMonotonic)
    inline qulonglong kernelTimestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("KernelTimestampMonotonic")); }

    Q_PROPERTY(qulonglong LoaderTimestamp READ loaderTimestamp)
    inline qulonglong loaderTimestamp() const
    { return qvariant_cast< qulonglong >(property("LoaderTimestamp")); }

    Q_PROPERTY(qulonglong LoaderTimestampMonotonic READ loaderTimestampMonotonic)
    inline qulonglong loaderTimestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("LoaderTimestampMonotonic")); }

    Q_PROPERTY(QString LogLevel READ logLevel WRITE setLogLevel)
    inline QString logLevel() const
    { return qvariant_cast< QString >(property("LogLevel")); }
    inline void setLogLevel(const QString &value)
    { setProperty("LogLevel", QVariant::fromValue(value)); }

    Q_PROPERTY(QString LogTarget READ logTarget WRITE setLogTarget)
    inline QString logTarget() const
    { return qvariant_cast< QString >(property("LogTarget")); }
    inline void setLogTarget(const QString &value)
    { setProperty("LogTarget", QVariant::fromValue(value)); }

    Q_PROPERTY(uint NFailedJobs READ nFailedJobs)
    inline uint nFailedJobs() const
    { return qvariant_cast< uint >(property("NFailedJobs")); }

    Q_PROPERTY(uint NInstalledJobs READ nInstalledJobs)
    inline uint nInstalledJobs() const
    { return qvariant_cast< uint >(property("NInstalledJobs")); }

    Q_PROPERTY(uint NJobs READ nJobs)
    inline uint nJobs() const
    { return qvariant_cast< uint >(property("NJobs")); }

    Q_PROPERTY(uint NNames READ nNames)
    inline uint nNames() const
    { return qvariant_cast< uint >(property("NNames")); }

    Q_PROPERTY(double Progress READ progress)
    inline double progress() const
    { return qvariant_cast< double >(property("Progress")); }

    Q_PROPERTY(QString RuntimeWatchdogUSec READ runtimeWatchdogUSec WRITE setRuntimeWatchdogUSec)
    inline QString runtimeWatchdogUSec() const
    { return qvariant_cast< QString >(property("RuntimeWatchdogUSec")); }
    inline void setRuntimeWatchdogUSec(const QString &value)
    { setProperty("RuntimeWatchdogUSec", QVariant::fromValue(value)); }

    Q_PROPERTY(bool ShowStatus READ showStatus)
    inline bool showStatus() const
    { return qvariant_cast< bool >(property("ShowStatus")); }

    Q_PROPERTY(QString ShutdownWatchdogUSec READ shutdownWatchdogUSec WRITE setShutdownWatchdogUSec)
    inline QString shutdownWatchdogUSec() const
    { return qvariant_cast< QString >(property("ShutdownWatchdogUSec")); }
    inline void setShutdownWatchdogUSec(const QString &value)
    { setProperty("ShutdownWatchdogUSec", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Tainted READ tainted)
    inline QString tainted() const
    { return qvariant_cast< QString >(property("Tainted")); }

    Q_PROPERTY(QStringList UnitPath READ unitPath)
    inline QStringList unitPath() const
    { return qvariant_cast< QStringList >(property("UnitPath")); }

    Q_PROPERTY(qulonglong UserspaceTimestamp READ userspaceTimestamp)
    inline qulonglong userspaceTimestamp() const
    { return qvariant_cast< qulonglong >(property("UserspaceTimestamp")); }

    Q_PROPERTY(qulonglong UserspaceTimestampMonotonic READ userspaceTimestampMonotonic)
    inline qulonglong userspaceTimestampMonotonic() const
    { return qvariant_cast< qulonglong >(property("UserspaceTimestampMonotonic")); }

    Q_PROPERTY(QString Version READ version)
    inline QString version() const
    { return qvariant_cast< QString >(property("Version")); }

    Q_PROPERTY(QString Virtualization READ virtualization)
    inline QString virtualization() const
    { return qvariant_cast< QString >(property("Virtualization")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> CancelJob(uint id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("CancelJob"), argumentList);
    }

    inline QDBusPendingReply<> ClearJobs()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ClearJobs"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateSnapshot(const QString &name, bool cleanup)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(cleanup);
        return asyncCallWithArgumentList(QLatin1String("CreateSnapshot"), argumentList);
    }

    inline QDBusPendingReply<DBusUnitFileChangeList> DisableUnitFiles(const QStringList &files, bool runtime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime);
        return asyncCallWithArgumentList(QLatin1String("DisableUnitFiles"), argumentList);
    }

    inline QDBusPendingReply<QString> Dump()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Dump"), argumentList);
    }

    inline QDBusPendingReply<bool, DBusUnitFileChangeList> EnableUnitFiles(const QStringList &files, bool runtime, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        return asyncCallWithArgumentList(QLatin1String("EnableUnitFiles"), argumentList);
    }
    inline QDBusReply<bool> EnableUnitFiles(const QStringList &files, bool runtime, bool force, DBusUnitFileChangeList &changes)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("EnableUnitFiles"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            changes = qdbus_cast<DBusUnitFileChangeList>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> Exit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Exit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> GetJob(uint id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("GetJob"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> GetUnit(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("GetUnit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> GetUnitByPID(uint pid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(pid);
        return asyncCallWithArgumentList(QLatin1String("GetUnitByPID"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetUnitControlGroupAttribute(const QString &name, const QString &attribute)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(attribute);
        return asyncCallWithArgumentList(QLatin1String("GetUnitControlGroupAttribute"), argumentList);
    }

    inline QDBusPendingReply<QString> GetUnitFileState(const QString &file)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(file);
        return asyncCallWithArgumentList(QLatin1String("GetUnitFileState"), argumentList);
    }

    inline QDBusPendingReply<> Halt()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Halt"), argumentList);
    }

    inline QDBusPendingReply<> KExec()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("KExec"), argumentList);
    }

    inline QDBusPendingReply<> KillUnit(const QString &name, const QString &who, int signal)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(who) << QVariant::fromValue(signal);
        return asyncCallWithArgumentList(QLatin1String("KillUnit"), argumentList);
    }

    inline QDBusPendingReply<DBusUnitFileChangeList> LinkUnitFiles(const QStringList &files, bool runtime, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        return asyncCallWithArgumentList(QLatin1String("LinkUnitFiles"), argumentList);
    }

    inline QDBusPendingReply<ManagerDBusJobList> ListJobs()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListJobs"), argumentList);
    }

    inline QDBusPendingReply<DBusUnitFileListList> ListUnitFiles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListUnitFiles"), argumentList);
    }

    inline QDBusPendingReply<ManagerDBusUnitList> ListUnits()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListUnits"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> LoadUnit(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("LoadUnit"), argumentList);
    }

    inline QDBusPendingReply<DBusUnitFileChangeList> MaskUnitFiles(const QStringList &files, bool runtime, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        return asyncCallWithArgumentList(QLatin1String("MaskUnitFiles"), argumentList);
    }

    inline QDBusPendingReply<> PowerOff()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("PowerOff"), argumentList);
    }

    inline QDBusPendingReply<bool, DBusUnitFileChangeList> PresetUnitFiles(const QStringList &files, bool runtime, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        return asyncCallWithArgumentList(QLatin1String("PresetUnitFiles"), argumentList);
    }
    inline QDBusReply<bool> PresetUnitFiles(const QStringList &files, bool runtime, bool force, DBusUnitFileChangeList &changes)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("PresetUnitFiles"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            changes = qdbus_cast<DBusUnitFileChangeList>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> Reboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Reboot"), argumentList);
    }

    inline QDBusPendingReply<bool, DBusUnitFileChangeList> ReenableUnitFiles(const QStringList &files, bool runtime, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        return asyncCallWithArgumentList(QLatin1String("ReenableUnitFiles"), argumentList);
    }
    inline QDBusReply<bool> ReenableUnitFiles(const QStringList &files, bool runtime, bool force, DBusUnitFileChangeList &changes)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime) << QVariant::fromValue(force);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ReenableUnitFiles"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            changes = qdbus_cast<DBusUnitFileChangeList>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> Reexecute()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Reexecute"), argumentList);
    }

    inline QDBusPendingReply<> Reload()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Reload"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> ReloadOrRestartUnit(const QString &name, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("ReloadOrRestartUnit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> ReloadOrTryRestartUnit(const QString &name, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("ReloadOrTryRestartUnit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> ReloadUnit(const QString &name, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("ReloadUnit"), argumentList);
    }

    inline QDBusPendingReply<> RemoveSnapshot(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("RemoveSnapshot"), argumentList);
    }

    inline QDBusPendingReply<> ResetFailed()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ResetFailed"), argumentList);
    }

    inline QDBusPendingReply<> ResetFailedUnit(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("ResetFailedUnit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> RestartUnit(const QString &name, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("RestartUnit"), argumentList);
    }

    inline QDBusPendingReply<> SetEnvironment(const QStringList &names)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(names);
        return asyncCallWithArgumentList(QLatin1String("SetEnvironment"), argumentList);
    }

    inline QDBusPendingReply<> SetUnitControlGroup(const QString &name, const QString &group, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(group) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("SetUnitControlGroup"), argumentList);
    }

    inline QDBusPendingReply<> SetUnitControlGroupAttribute(const QString &name, const QString &attribute, const QStringList &values, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(attribute) << QVariant::fromValue(values) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("SetUnitControlGroupAttribute"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> StartUnit(const QString &name, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("StartUnit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> StartUnitReplace(const QString &old_unit, const QString &new_unit, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(old_unit) << QVariant::fromValue(new_unit) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("StartUnitReplace"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> StopUnit(const QString &name, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("StopUnit"), argumentList);
    }

    inline QDBusPendingReply<> Subscribe()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Subscribe"), argumentList);
    }

    inline QDBusPendingReply<> SwitchRoot(const QString &new_root, const QString &init)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(new_root) << QVariant::fromValue(init);
        return asyncCallWithArgumentList(QLatin1String("SwitchRoot"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> TryRestartUnit(const QString &name, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("TryRestartUnit"), argumentList);
    }

    inline QDBusPendingReply<DBusUnitFileChangeList> UnmaskUnitFiles(const QStringList &files, bool runtime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(files) << QVariant::fromValue(runtime);
        return asyncCallWithArgumentList(QLatin1String("UnmaskUnitFiles"), argumentList);
    }

    inline QDBusPendingReply<> UnsetAndSetEnvironment(const QStringList &unset, const QStringList &set)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(unset) << QVariant::fromValue(set);
        return asyncCallWithArgumentList(QLatin1String("UnsetAndSetEnvironment"), argumentList);
    }

    inline QDBusPendingReply<> UnsetEnvironment(const QStringList &names)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(names);
        return asyncCallWithArgumentList(QLatin1String("UnsetEnvironment"), argumentList);
    }

    inline QDBusPendingReply<> UnsetUnitControlGroup(const QString &name, const QString &group, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(group) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("UnsetUnitControlGroup"), argumentList);
    }

    inline QDBusPendingReply<> UnsetUnitControlGroupAttributes(const QString &name, const QString &attribute, const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(attribute) << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("UnsetUnitControlGroupAttributes"), argumentList);
    }

    inline QDBusPendingReply<> Unsubscribe()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Unsubscribe"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void JobNew(uint id, const QDBusObjectPath &job, const QString &unit);
    void JobRemoved(uint id, const QDBusObjectPath &job, const QString &unit, const QString &result);
    void StartupFinished(qulonglong firmware, qulonglong loader, qulonglong kernel, qulonglong initrd, qulonglong userspace, qulonglong total);
    void UnitFilesChanged();
    void UnitNew(const QString &id, const QDBusObjectPath &unit);
    void UnitRemoved(const QString &id, const QDBusObjectPath &unit);
};

#endif
